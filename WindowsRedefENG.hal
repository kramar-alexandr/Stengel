external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function Boolean UseTaxTemplatesforTaxCalc();
external inner function Boolean HasVarieties();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasTREO();
external inner function string 60 UserDefined(string,string);
external inner function Boolean HasModCRM();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasCustomerStatusReport();
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner function Boolean HasApprovals();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();

external inner function Boolean HASMODSL();
external inner function Boolean HASMODPOS();
external inner function Boolean HASMODSL();
external inner function Boolean HASLANGUAGES();
external inner function Boolean HASMODREST();
external inner function Boolean HASADVANCEDACCOUNTING();
external inner function Boolean HASSIMULATIONS();
external inner function Boolean HASOBJECTS();
external inner function Boolean HASMULTICURRENCY();
external inner function Boolean HASMODPL();
external inner function Boolean HASBASE2();
external inner function Boolean HASMODNL();
external inner function Boolean HASCATEGORIES();
external inner function Boolean HASSALESMANBONUS();
external inner function Boolean HASSALESMAN();
external inner function Boolean HASAGED();
external inner function Boolean HASPREPAYMENTS();
external inner function Boolean HASCONTACTCLASSIFICATION();

window IVDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,hm,hs,t,v,v2,v3,vm,vs,width,h5;
  record STG_SettingBlock STG_Settingr;
  string 255 label;
  Integer rn;

  BlockLoad(STG_Settingr);

  WindowBegin("Invoice",IVDClass,CGview,-);
  Sizeable(-1,-1,0,0);
  UseView(IVVc);

  ActiveFieldOnNew("CustCode");
  SetWRect(20,80,750,460);
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    if (HasLocalization("FIN")) then begin
      EditField(h,vm=(v+=20),180,"Payment Ref",ViewOnly,CalcFinRef,false,0);
    end else begin
      EditField(h,vm=(v+=20),135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    end;
    if (HasLocalization("BRA")) then begin
      EditField(500,vm,135,"Bank Receipt No.",ViewOnly,BankReceiptNr,false,0);
    end;
  end else begin
    v = v + 20;
    vm = v;
  end;
  CheckBox(h4=-80,v,0,"OK",OKFlag);
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Currency");
  TileButton(4,"Del. Terms");
  TileButton(5,"Identifiers");
  TileButton(6,"Price List");
  TileButton(7,"Inv. Address");
  TileButton(8,"Del. Address");
  Tile(1,110,false,"1",InvDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Invoice Date",Normal,InvDate,false,PasteCurDate);
  EditField(h1,v+=vs,25,"Payment Terms",Normal,PayDeal,false,PDSClass);//PDMSClass);
  EditField(h1,v+=vs,82,"Due Date",Normal,PayDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Trans. Date",Normal,TransDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Service Del. Date",Normal,ServiceDelDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,ClientContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  if (StandardHansa) then begin
    EditField(h3,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
  end else begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,0);
  end;
  EditField(h3,v+=vs,80,"Credit Reason",Normal,Reason,false,StandProblemsSClass);
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"Payment Mode",Normal,PMCode,false,PMSClass);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h3,v+=vs,80,"Invoice Type",Normal,BrazilEInvType,false,BrazilEInvTypeSClass);
  end;
  if (HasLocalization("BOL,BRA,HRV,MEX")) then begin
    EditField(h3,v+=vs,130,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
  end;
  if (HasLocalization("MEX")) then begin
    EditField(h3,v+=vs,80,"No. Pay. Acc.",Normal,PayAccNo,false,0);
  end;
  if (HasLocalization("RUS")) then begin
    EditField(h3,v+=vs,-20,"Receipt Info",Normal,ReceiptInfo,false,0);
  end;
  CheckBox(-80,v=6,0,"Disputed",DisputedFlag);
  if (StandardHansa) then begin
    CheckBox(h4,v+=16,0,"Update #Stock#",UpdStockFlag);
  end;
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
  //  CheckBox(20,-20,0,"OK",OKFlag);
  if (CompileType!=ctiPhone) then begin
    EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (UseTaxTemplatesforTaxCalc==false) then begin
      if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(160,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(160,-21,70,"Total GP",ViewOnly,TotGP,true,0);
      end;
      if (HasLocalization("GBR,LTU,POL")) then begin
        EditField(310,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
        EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end else begin
        EditField(290,-41,70,"Tax2",ViewOnly,TAX2Sum,true,0);
        EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end;
      EditField(410,-41,95,"#VAT#",ViewOnly ,Sum3,true,0);
    end else begin
      if (UserCanAction("ViewCostPrice",true)) then begin
        EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
        EditField(290,-21,70,"Total GP",ViewOnly,TotGP,true,0);
      end;
      EditField(410,-41,95,"Tax",ViewOnly ,Sum3,true,0);
    end;
    EditField(410,-21,95,"Base",ViewOnly,BaseSum4,true,0);
    EditField(-150,-41,95,"Subtotal",ViewOnly ,Sum1,true,0);
    EditField(-150,-21,95,"TOTAL",ViewOnly ,Sum4,true,0);
  end else begin
    EditField(55,-41,80,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    EditField(55,-21,80,"#VAT#",ViewOnly ,Sum3,true,0);
    EditField(-120,-41,80,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    EditField(-120,-21,80,"TOTAL",ViewOnly ,Sum4,true,0);
  end;
  v = 24;
  MatrixBegin(4,v,-50,-49,-,200);
  MatTypedRow(stp);
  MatOverStrike(ovst);
  Flip(0);
  MatCol(t=kInvoiceRowTypeNormal,32,"Item",0,ArtCode,false,ForSaleINSClass);
  //  MatCol(t,94,"Var",0,VARList,true,VARSClass);
  //  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=kInvoiceRowTypeCredit,32,"Credit of Invoice",true);
  MatCol(t,208,"",0,OrdRow,false,ARSClass);
  MatCol(t,-216,"",0,Spec,false,0);//MatText(t,-216,"",true);
  MatText(t=kInvoiceRowTypeDebit,32,"Debit of Invoice",true);
  MatCol(t,208,"",0,OrdRow,false,0);
  MatCol(t,-216,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeInterest,32,"Interest",true);
  MatCol(t,98,"",0,ArtCode,false,0);
  MatCol(t,153,"",0,Quant,true,0);
  MatCol(t,188,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeDownpayment,32,"Down Payment",true);
  MatColTL(t,122,"",0,-1,ViewOnly,0,ArtCode,true,0);
  MatColTL(t,188,"",0,-1,ViewOnly,0,Quant,true,0);
  MatCol(t,238,"",0,Spec,false,0);
  MatColTL(t,-240,"",0,-1,ViewOnly,0,Price,true,0);
  MatColTL(t,-180,"",0,-1,ViewOnly,0,vRebate,true,0);
  MatColTL(t,-140,"",0,-1,Normal,0,Sum,true,0); //?? TL?
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-100,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-54,"",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-70,"",0,SalesAcc,false,AccSClass);
    MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  end;
  MatText(t=kInvoiceRowTypePrepayment,32,"Prepayment Number",true);
  MatCol(t,208,"",0,CUPNr,false,ARPay3SClass);
  MatCol(t,-216,"",0,BasePrice,false,0);
  MatCol(t,-170,"",0,Price,true,0);// Price holds the #VAT# sum, Recipe holds the date of prepaym. BasePrice holds amount in base 1, TAX1Reb holds TAX1Sum
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeLoan,32,"Loan",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeLoanInterest,32,"Loan Int.",true);
  MatCol(t,98,"",0,CuAccCode,true,CuAccSClass);
  MatCol(t,-350,"",0,SalesAcc,true,AccSClass);
  MatCol(t,-230,"",0,Objects,false,0);
  MatCol(t,-110,"",0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeUpdateMark,32,"Signature",false);
  MatColTL(t,94,"Sign",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,144,"Description",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeVoid,32,"Void",false);
  MatColTL(t,65,"Sign",0,-1,ViewOnly,0,VoidedSign,false,0);
  MatCol(t,100,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,150,"Qty.",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,150,"Qty.",0,Quant,true,0);
  end;
  MatCol(t,190,"Price",0,Price,true,0);
  MatCol(t,250,"Description",0,Spec,false,0);
  MatCol(t,-195,"Ser. No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-110,"%",0,vRebate,true,0);
  MatCol(t,-80,"Sum",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeSubtotal,32,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-140,"Sum",0,-1,ViewOnly,0,Sum,true,0);
  //  MatCol(t,-70,"Cost",0,Cost,true,0);
  MatText(t=kInvoiceRowTypeHidden,32,"This row and all rows below it will be hidden on printout",false);
  MatText(t=kInvoiceRowTypeCorrection,32,"K",true);
  MatCol(t,45,"Item",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,91,"Qty",0,Quant,true,0);
  MatText(t=kInvoiceRowTypeRetention,32,"Retention",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-210,"SalesAcc",0,-1,0,0,SalesAcc,false,AccSClass);
  MatColTL(t,-110,"Sum",0,-1,0,0,Sum,true,0);
  MatCol(t,-30,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherSold,32,"GV",true);
  MatCol(t,58,"",0,GCNr,false,GCSClass);
  MatCol(t,-416,"",0,Spec,false,0);
  MatCol(t,-84,"Sum",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeGiftVoucherPayment,32,"GVR",true);
  MatCol(t,58,"",0,GCNr,false,GCSSClass);
  MatCol(t,-316,"",0,Spec,false,0);
  MatCol(t,-84,"Sum",0,Sum,true,0);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatText(t=kInvoiceRowTypeCashPayment,32,"CASH",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsPayment,32,"LOYPA",true);
  MatCol(t,68,"Sum",0,Sum,true,0);
  MatCol(t,108,"Points",0,Points,true,0);
  MatCol(t,148,"Currency",0,CurncyCode,true,CurncyCodeSClass);
  MatCol(t,-280,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeLoyaltyPointsBonus,28,"LOYBO",true);
  MatCol(t,68,"Points",0,Points,true,0);
  MatCol(t,141,"Spec",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeCreditCardPayment,32,"CC",true);
  MatCol(t,94,"Sum",0,Sum,true,0);
  MatCol(t,198,"P. Mode",0,PayMode,true,PMSClass);
  MatCol(t,250,"Spec",0,Spec,false,0);
  MatCol(t,-280,"",0,CreditCard,false,CreditCardSClass);
  MatCol(t,-84,"Authorization",0,AuthorizationCode,false,0);
  MatText(t=kInvoiceRowTypeHeader,32,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType18,28,"Reserved",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowType19,28,"Reserved",true); // Don't use this number
  MatCol(t,100,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,CuAccCode,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,AccSClass);
  MatCol(t,452,"",0,Spec,false,0);
  MatText(t=kInvoiceRowTypeWithholdingTax,32,"Withholding Tax",true);
  MatCol(t,132,"",0,WHTax,false,WHTaxSClass);
  MatCol(t,172,"",0,SalesAcc,false,AccSClass);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,392,"",0,Spec,false,0);
  if (StandardHansa==false) then begin
    MatText(t=kInvoiceRowTypeMultiBuyDiscount,32,"Multi-buy Discount",true);
  end;
  MatCol(t,152,"",0,MBRCode,false,0);
  MatCol(t,192,"",0,ArtCode,false,ForSaleINSClass);
  MatCol(t,-400,"",0,Spec,false,0);
  MatCol(t,-270,"",0,Quant,true,0);
  MatCol(t,-235,"",0,Price,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatText(t=kInvoiceRowTypeDebtorsTransfer,32,"DBT TRSF",true);
  MatCol(t,94,"Spec",0,Spec,false,0);
  MatCol(t,-235,"Debtors A/C",0,SalesAcc,false,0);
  MatCol(t,-135,"Sum",0,Sum,true,0);
  MatCol(t,-30,"#V-Cd#",0,VATCode,false,0);
  /*
  MatText(t=kInvoiceRowTypePreviousDownpayment,32,"Prev. Down Payment",true);
  MatColTL(t,152,"",0,-1,ViewOnly,0,CUPNr,true,0);
  MatColTL(t,222,"",0,-1,ViewOnly,0,ServiceDelDate,true,0);
  MatColTL(t,-200,"",0,-1,Normal,0,Price,true,0);
  MatColTL(t,-100,"",0,-1,Normal,0,Sum,true,0);
  */
  //t = 21 kInvoiceRowTypeChequePayment
  MatText(t=kInvoiceRowTypeActivationDate,32,"Activation Date",true);
  MatCol(t,130,"",0,ServiceDelDate,false,PasteCurDate);
  Flip(1);
  //  MatCol(t=kInvoiceRowTypeNormal,194,"Description",0,Spec,false,0);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Description",0,Spec,false,0);
  //EBS -->
  if STG_Settingr.InvWeightFlag == 1 then begin
    MatCol(t,-285,"Weight",0,STG_Weight,true,0);
  end;
  //EBS <--
  MatCol(t,-225,"Unit Price",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  //  MatColTL(t,-235,"",0,M45Val,Normal,0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeInterest,-260,"",0,OrdRow,true,0);
  MatCol(t,-235,"",0,BasePrice,true,0);
  MatCol(t,-135,"",0,vRebate,true,0);
  MatCol(t,-100,"",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  Flip(2);
  MatCol(t=kInvoiceRowTypeNormal,144,"Description",0,Spec,false,0);
  MatCol(t,-360,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-310,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Location",0,Location,false,LocationSClass);
  MatCol(t,-180,"Position",0,PosCode,false,UsedPosSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
    if (HasLocalization("GBR,LTU,POL") and IsEnterprise) then begin
      MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-360,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-310,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-255,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-180,"Position",0,PosCode,false,UsedPosSClass);
  end;
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-144,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
    MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  MatCol(t=kInvoiceRowTypeInterest,-70,"",0,SalesAcc,false,AccSClass);
  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  //  MatCol(t=kInvoiceRowTypePrepayment,-224,"",0,SalesAcc,false,AccSClass);
  //  MatCol(t,-24,"",0,VATCode,false,VATCodeSClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-250,"A/C",0,SalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-170,"Accrual",0,PeriodCode,false,AutSimPerSClass);
  end;
  MatCol(t,-104,"Tags/Objects",0,Objects,false,ObjSClass);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-35,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  Flip(3);
  t=kInvoiceRowTypeNormal;
  MatCol(t,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Unit Price",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Cost B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-380,"Unit Price",0,Price,true,0);
    MatCol(t,-315,"%",0,vRebate,true,0);
    MatCol(t,-280,"Cost B2",0,BasePriceB2,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-315,"Unit Price",0,Price,true,0);
    MatCol(t,-245,"%",0,vRebate,true,0);
    MatCol(t,-210,"Cost",0,BasePrice,true,0);
    MatCol(t,-140,"GP",0,rowGP,true,0);
    MatCol(t,-70,"FIFO",0,FIFO,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  Flip(4);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Description",0,Spec,false,0);
  MatCol(t,-370,"#Salesmen#",0,Salesmen,false,UserSClass);
  MatCol(t,-300,"Serial No",0,SerialNr,false,SerialNrSClass);
//  MatCol(t,-240,"Main Serial No.",0,MotherNr,true,0);
  MatCol(t,-220,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-170,"Recipe",0,Recepy,false,RecSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-70,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-310,"Serial No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-180,"Recipe",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-310,"Serial No",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-240,"P.Factor",0,PriceFactor,true,0);
  MatCol(t,-180,"Recipe",0,Recepy,true,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-110,"Row FIFO",0,FIFORowVal,true,0);
  end else begin
  end;
  MatCol(t,-80,"",0,MotherArtCode,false,0);
  MatCol(t,-40,"",0,RecipeQuant,false,0);
  //  MatCol(t,-40,"Coeff",0,Coefficient,true,0);
  Flip(5);
  t=kInvoiceRowTypeNormal;
  MatCol(t=kInvoiceRowTypeNormal,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr. of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr. of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);//New Row Type..
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Units Unit Price",0,UnitFactPrice,true,0);
  Flip(6);
  t = kInvoiceRowTypeNormal;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-390,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Coeff.",0,Coefficient,true,0);
  MatCol(t,-260,"P.Factor",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"Serv. Co. Hist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Cred. Row",0,CreditedRow,false,0);
  MatCol(t,-70,"Environ. Tax",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-390,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
  MatCol(t,-300,"Coeff.",0,Coefficient,true,0);
  MatCol(t,-260,"P.Factor",0,PriceFactor,true,0);
  if (UserCanAction("HWContractAdmin",false) or UserCanAction("HWContractCUServiceHistEdit",false) or UserCanAction("HWContract_LocalAdmin",false)) then begin
    MatCol(t,-210,"Serv. Co. Hist.",0,CUServiceHistNr,false,0);
  end;
  MatCol(t,-130,"Cred. Row",0,CreditedRow,false,0);
  MatCol(t,-70,"Environ. Tax",0,RepaExVAT,true,0);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-80,"Environ. Tax",0,RepaExVAT,true,0);
  Flip(7);
  t = kInvoiceRowTypeNormal;
  if (GuiType!=kGuiiPhone) then begin
    MatCol(t,144,"Description",0,Spec,false,0);
  end;
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  MatCol(t=kInvoiceRowTypeCorrection,144,"Description",0,Spec,false,0);
  MatCol(t,-240,"Customs No.",0,CustomsNr,false,0);
  MatCol(t,-100,"Country of Origin",0,CountryOfOrg,false,CountrySClass);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusIVDsm");
  RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"IVLastSPrsm");
  RowMenuItem(0,"Add Header Line",' ',' ',0,"HeaderLineIVDsm");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"HiddenLineIVDsm");
  if (HasLocalization("SVN")==false) then begin
    RowMenuItem(0,"Add Cash Line",' ',' ',0,"CashLineIVDsm");
    RowMenuItem(0,"Add Credit Card Line",' ',' ',0,"CreditCardLineIVDsm");
  end;
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Add Retention",' ',' ',0,"RetentionLineIVDsm");
  end;
  RowMenuItem(0,"Add Subtotal",' ',' ',0,"SubTotalLineIVDsm");
  RowMenuItem(0,"Apple Warranty Status Check",'w',' ',0,"WarrantyStatusIVDsm");
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ?
    RowMenuItem(0,"Add license start date",' ',' ',0,"LicStartIVDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 22;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+ vs; VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
  EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 310; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
    EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
    EditField(h1,v+=vs,80,"Plan. Sent Date",Normal,PlanSendDate,false,PasteCurDate);
    EditField(h1,v+=vs,80,"Plan. Sent Time",Normal,PlanSendTime,false,PasteCurTime);
  end;
  EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Plan. Arrival Date",Normal,PlanArrDate,false,PasteCurDate);
    EditField(h2,v+=vs,80,"Plan. Arrival Time",Normal,PlanArrTime,false,PasteCurTime);
    EditField(h2,v+=vs,80,"Freight Comp.",Normal,FreightCode,false,FreightCompanySClass);
    CheckBox(h3,v=vm,0,"Update #Stock#",UpdStockFlag);
    EditField(h3,v+=2*vs,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
    EditField(h3,v+=vs,80,"Intrastat Trans. Code",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
    EditField(h3,v+=vs,80,"Global Transport No.",Normal,GlobalTransportNr,false,0);
    EditField(h3,v+=vs,80,"Global Transport Date",Normal,GlobalTransportDate,false,PasteCurDate);
  end;
  Tile(5,170,false,"5",OrderNr);
  EditField(h1,v=vm,80,"Order No.",ViewOnly,OrderNr,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Service Order No.",ViewOnly,SVONr,false,0);
    EditField(h1,v+=vs,80,"Cred. Man. No.",ViewOnly ,CredManNr,false,0);
  end;
  EditField(h1,v+=vs,135,"Official No. 2",Normal,OfficialSerNr2,false,0);
  if (HasLocalization("FIN")) then begin
    EditField(h1,v+=vs,135,"Delivery Site Code",Normal,DeliverySiteCode,false,0);
    EditField(h1,v+=vs,135,"Work Site Number",Normal,WorkSiteNumber,false,0);
  end;
  if (HasLocalization("BRA")) then begin
    EditField(h1,v+=vs,80,"Federal Service",Normal,FedServCode,false,FederalSerSClass);
  end;
  if (HasLocalization("ARG,BOL")) then begin
    EditField(h1,v+=vs,135,"CAE/CAEA",Normal,CAE,false,0);
    EditField(h1,v+=vs,135,"CAE Expiry",Normal,CAEExpiry,false,0);
    EditField(h1,v+=vs,70,"CAEA Start",ViewOnly,CAEAStartDate,false,0);
  end;

  EditField(h2=350,v=vm,80,"Stat. Value",Normal,StatVal,true,0);
  EditField(h2,v+=vs,80,"Trans. Time",Normal,TransTime,false,SetSClass);
  EditField(h2,v+=vs,80,"Print Date",ViewOnly,PrintDate,false,0);
  EditField(h2,v+=vs,80,"Oprt. Comment",ViewOnly,OYDescription,false,0);
  if (FileExists("hob/hmdatadef.hob")) then begin//??? why here and not it ahansamail ?
    EditField(h2,v+=vs,80,"ToBe Inv.Nr",ViewOnly,ToBeIVNr,false,0);
  end;
  //  ColourPushButton(-100,v,-20,v+60,"TestIVDClassCardData","Test" & chr(10) & "CardData",4);
  //  SoftEditField(h3+50,v,100,"Control Code"  ,ViewOnly ,"TaxAuthIDCC",false,0,M4Str,60);
  if (StandardHansa==false) then begin
    if (HasLocalization("ARG,BOL")) then begin
      EditField(h2,v+=vs,135,"Tax Auth. ID",Normal,TaxAuthID,false,0);
      EditField(h2,v+=vs,135,"Control Code",ViewOnly ,TaxAuthIDCC,false,0);
    end;
    if (HasLocalization("PRT")) then begin
      EditField(h2,v+=vs,135,"Status",Normal,Status,false,SetSClass);
    end;
    if (HasLocalization("ARG,PRT")) then begin
      EditField(h2,v+=vs,135,"Tax Type",Normal,TaxInvType,false,SetSClass);
    end;
    if (HasLocalization("ARG")) then begin
      EditField(h2,v+=vs,70,"CAEA Expiry",ViewOnly,CAEAExpiryDate,false,0);
    end;
    if (HasLocalization("SVN")) then begin
      EditField(h2,v+=vs,180,"E-Inv. Conf. No.",ViewOnly,TaxAdminReceiptNr,false,0);
      EditField(h2,v+=vs,180,"Tax Seal",ViewOnly,TaxAdminServSeal,false,0);
    end;
  end;
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Date",ViewOnly,EInvExpDate,false,0);//Tx server
  //  EditField(h2,v+=vs,135,"E-Inv Exp. Qty",ViewOnly,EInvExpQty,false,0);
  CheckBox(h3=450,v=vm,0,"No Reminder",NoRemndrFlag);
  CheckBox(h3,v+=16,0,"No Interest",NoInterestFlag);
  CheckBox(h3,v+=16,0,"No Collection",NoColectionFlag);
  CheckBox(h3,v+=16,0,"Fiscal Invoice",FiscalFlag);
  CheckBox(h3+130,v=vm,0,"Cust. _Info on Trans.",ARonTR);
  CheckBox(h3+130,v+=16,0,"Don't send as E-Invoice",NoEInvoice);
  CheckBox(h3+130,v+=16,0,"Self Billing",SelfBilling);
  CheckBox(h3+130,v+=16,0,"Post Receipt #VAT#",IPBookVAT);
  if (HasLocalization("LTU")) then begin
    CheckBox(h3+130,v+=16,0,"Exclude from Exports",ExcludeFromExports);
  end;
//    CheckBox(h3,v+=16,0,"Including VAT",InclVAT);
  //  CheckBox(h3,v+=16,0,"E-Invoice Exported",EInvExpFlag);
  Tile(6,150,false,"6",PriceList); vs = 20; h3=550;
  EditField(h1,v=vm,80,"Price List",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Discount Matrix",Normal,RebCode,false,0);
  //  EditField(h1,v+=vs,80,"Disc. %",ViewOnly,DiscPerc,false,0);
  //  EditField(h1,v+=vs,80,"Disc. Amount",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Original Customer",ViewOnly,OrgCust,false,0);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Credit Card",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"#Authorisation#",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,80,"Debtors",Normal,ARAcc,false,AccSClass);
  EditField(h1,v+=vs,-20,"Comment",Normal,InvComment,false,0);
  if (HasSalesGroup) then begin
    EditField(h2=310,v=vm,80,"Sales Group",ViewOnly,SalesGroup,true,0);
    EditField(h2,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end else begin
    EditField(h2,v=vm,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  EditField(h2,v+=vs,80,"Commission",Normal,Commision,true,0);
  EditField(h2,v+=vs,80,"Total Incl. Com.",ViewOnly,SumIncCom,true,0);
  EditField(h2,v+=vs,80,"Interest",Normal,IntCode,true,IntSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Orig. No.",Normal,CredInv,false,0);
    EditField(h3,v=vm,80,"Reminder Level",Normal,LastRemndr,false,0);
  end else begin
    EditField(h3,v=vm,80,"Orig. No.",Normal,CredInv,false,0);
    EditField(h3,v+=vs,80,"Reminder Level",Normal,LastRemndr,false,0);
  end;
  EditField(h3,v+=vs,80,"Last Reminder Date",Normal,LastRemDate,false,PasteCurDate);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Loyalty Card",Normal,LoyaltyCardNr,false,LoyaltyCardSClass);
  end;
  EnterSkip(Math);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Membership Level",ViewOnly,LCMLevel,false,LCMemberLevelSClass);
    EditField(h3,v+=vs,80,"Loyalty Points",ViewOnly,Points,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v+=vs,80,"TREO No.",Normal,TREONr,false,0);
  end;
  Tile(7,250,false,"7",Addr1); vs = 20;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Country",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  EditField(h5,v,width,"Account Op.",Normal,BankCode,false,BankSClass);
  if (StandardHansa==false) then begin
    if (HasApprovals) then begin
      SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
    end;
/*
//oldapprovals
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm+40,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"#Reg. No.# 1",Normal,RegNr1,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  Tile(8,170,false,"8",ShipAddr0); vs = 20;
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Delivery",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Delivery",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
  end;
  EditField(h2,v,150,"Delivery GLN",ViewOnly,DelRecipientGLN,false,0);
  EnterSkip(InvDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Invoice Status",'r',2,"IVInfoIVDsm");
    SpecialMenu("Item Status",'I',0,"ItemStatusIVDsm");
    SpecialMenu("Open #NL# Transaction",'t',8,"OpenTRFromIV");
    SpecialMenu("Create #Credit Note#",' ',20,"CreateCreditNoteIVDsm");
    SpecialMenu("Add Subtotal",' ',12,"SubTotalLineIVDsm");
    SpecialMenu("Connect to Prepayment",' ',4,"ConnectToPrepayIVDsm");
/*not working yet
    SpecialMenu("Create Email",'m',23,"CreateMailFromIVDsm");
*/
  end else begin
//    SpecialMenu("Item Status",'I',0,"ItemStatusIVDsm");
    if (HasCustomerStatusReport) then begin
      SpecialMenu("Customer Status",'e',0,"CUStatusIVDsm");
    end;
    SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
    SpecialMenu("Invoice Status",'r',2,"IVInfoIVDsm");
    SpecialMenu("Add Environment Tax",' ',19,"RepaIVsm");
    if (GuiType==kGuiiPhone) then begin
//      SpecialMenu("Sign",' ',10,"SignIVDsm");//what is that ?
    end;
    SpecialMenu("Change to Base 1",' ',14,"SwitchToBase1IVDsm");
    SpecialMenu("Connect to Prepayment",' ',4,"ConnectToPrepayIVDsm");
    SpecialMenu("Recalculate Discount",' ',11,"RecalcDiscountIVDsm");
    SpecialMenu("Recalculate Weight and Volume",' ',10,"RecalcWeightIVDsm");
    SpecialMenu("Update Currency Price List Items",' ',5,"UpdatePricesIVDsm");
    SpecialMenu("Print Cash IN-OUT",' ',7,"PrintCashInOutIVDsm");
    if (HasLocalization("PRT")==false) then begin
      SpecialMenu("Print Proforma Invoice",' ',3,"PrintProformaIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("Send to Fiscal Device",' ',19,"PrintToFiscPrntIVDsm");
      SpecialMenu("Credit Card Payment",' ',22,"CCPayIVDsm");
      SpecialMenu("Edit #Instalments#",' ',24,"EditInstalmentIVDsm");
    end;
    if (HasLocalization("EST")) then begin
      SpecialMenu("Resend E-Invoice",' ',21,"ResendEstEIVDsm");
    end else begin
      SpecialMenu("Resend E-Invoice",' ',21,"ResendEIVDsm");
    end;
    if (HasLocalization("ARG")) then begin
      SpecialMenu("Send Argentinean E-Invoice",'n',17,"SendArgEInvIVDsm");
      SpecialMenu("Retrieve CAE/CAEA",'',17,"RetriveCAEArgEInvIVDsm");
    end;
    if (HasLocalization("MEX")) then begin
      SpecialMenu("Send Mexican E-Invoice",'e',17,"SendMexEInvIVDsm");
    end;
    if (HasLocalization("BRA")) then begin
      SpecialMenu("Send Brazilian E-Invoice",' ',27,"SendBraEInvIVDsm");
      SpecialMenu("Get Bank Receipt",' ',28,"GetBankReceiptDsm");
    end;
    if (HasLocalization("FIN")) then begin
      SpecialMenu("Export Finvoice",' ',28,"ExportFinvoiceIVDsm");
    end;
    if (HasLocalization("USA")) then begin
      SpecialMenu("Get Tax Rates",' ',0,"IVGetTaxRatesDsm");
    end;

    SpecialMenu("Open #NL# Transaction",'t',8,"OpenTRFromIV");
    if (StandardHansa==false) then begin
      SpecialMenu("Manager's Discount Override",' ',24,"MgrsDiscOverrideIVDsm");
      if (HasTaxMatrix) then begin
        SpecialMenu("Open Tax Matrix",' ',25,"TestVatMatrixIVDsm");
      end;
    end;
    if (HasApprovals) then begin
      SpecialMenu("Request Approval",' ',6,"IVSendforAcceptanceIVDsm");
      SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModCRM) then begin
//      SpecialMenu("Activity",'c',9,"CreateActFromIVDsm");
    end;
    SpecialMenu("Cash In",' ',1,"DoCLInFromIVD");
    SpecialMenu("#Credit Note#",' ',20,"CreateCreditNoteIVDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Credit Agreement",' ',25,"CreateCredManIVsm");
    end;
    SpecialMenu("Contract",' ',13,"COFromIVDsm");
    if (StandardHansa==false) then begin
      if (HasLocalization("PRT")==false) then begin
        SpecialMenu("Correction Invoice",' ',16,"CorrectionIVsm");
      end;
      SpecialMenu("Debit Note",' ',20,"CreateDebitNoteIVDsm");
      SpecialMenu("EDI Invoice",' ',9,"DoEDIInvFromIVD");
    end;
    SpecialMenu("Email",'m',23,"CreateMailFromIVDsm");
    if (HasLocalization("UKR")) then begin
      SpecialMenu("First Event",' ',18,"FirstEventIVDsm");
    end;
    if (StandardHansa==false) then begin
      SpecialMenu("#Instalment# Receipts",' ',6,"CreateInstalmentsIVDsm");
      if (HasLocalization("HRV,POL,RUS,SRB,SVN,UKR")) then begin
        SpecialMenu("#VAT# Correction #S/L#",' ',17,"VATCorrectionIVsm");
      end;

    //  SpecialMenu("GSXAutoEnrollmentIVDsm",'w',26,"GSXAutoEnrollmentIVDsm");

    //  SpecialMenu("TESTSendArgEInvoiceFECAESolicitar",' ',25,"TESTSendArgEInvoiceFECAESolicitar");
    //  SpecialMenu("Test Mex E-Invoices",'1',0,"TestMexEInvoices");
    end;
    SpecialMenu("Add Customer",' ',0,"AddCustomerIVDsm");
    SpecialMenu("Add Item",' ',0,"AddItemIVDsm");
  end;
  EndWindow;
end;


window MainRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,hacc,v,vm,vm2,vs;
  Integer tilenr;

  WindowBegin("Specify #Nominal Ledger#",MainRClass,CGRcW,RcType);
  UseView(RcVc);
  if (IsEnterprise) then begin
    SetWRect(20,80,600,380);
    Tile(0,40,false,"",Period2Str);
    h = 180; h2 = 342;
  end else begin
    SetWRect(20,80,400,350);
    h = 120;
  end;
  vs = 20;
  hacc = 342;
  PeriodField(h,v=6,"Period");
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs,150,"Loop 1",M4UStr,Normal,60,f4,false,AccSClass);
    TileButtons(v,2);
    RadioButton(h2,v,0,0,"Accounts",flags[11]);
    tilenr = 1;
    Tile(tilenr,340,false,tilenr,ObjStr); tilenr = tilenr + 1;
    v = 6;
  end else begin
    EditFieldTL(h,v+=vs,150,"Accounts",M4UStr,Normal,60,f4,false,AccSClass);
  end;
  if (HasObjects) then begin
    if (IsEnterprise) then begin
      EditFieldTL(h,v,250,"Tag/Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
    end else begin
      EditFieldTL(h,v+=vs,150,"Tag/Object",M4UStr,Normal,60 ,ObjStr,false,ObjSClass);
    end;
    EditFieldTL(h,v+=vs,50,"Tag/Object Type",M4UStr,Normal,5 ,ObjType,false,OTSClass);
  end;
  if (IsEnterprise) then begin
    CheckBox(350,v,0,"Including unspecified",flags[2]);
    EditFieldTL(h,v+=vs,200,"Only with Text",M4Str,Normal,30,Stext,false,0);
  end else begin
    EditFieldTL(h,v+=vs,150,"Only with Text",M4Str,Normal,30,Stext,false,0);
  end;
  if (HasModSL or HasModPOS or HasModPL or HasModRest) then begin
    EditFieldTL(h,v+=vs,50,"#VAT# Code",M4Code,Normal,10,f1,false,VATCodeSClass);
  end;
  if (HasLanguages) then begin
    EditFieldTL(h,v+=vs,50,"Language",M4UStr,Normal,5,Language,false,LangSClass);
  end;
  if (HasMultiCurrency) then begin
    EditFieldTL(h,v+=vs,50,"Currency",M4UStr,Normal,5,CurncyCode,false,CurncyCodeSClass);
  end;
  if (IsEnterprise) then begin
    EditFieldTL(h,v+=vs,30,"Recon. Code",M4UStr,Normal,5,f2,false,ReconCodeSClass);
    CheckBox(220,v,0,"Exclude with Code",flags[25]);
    if (StandardHansa==false) then begin
      EditFieldTL(h,v+=vs,250,"Reference",M4Str,Normal,60,LastAcc,false,0);
    end;
  end;
  if (HasObjects) then begin
    EditFieldTL(h,v+=vs,80,"Exclude Tag/Object",M4UStr,Normal,60,f3,false,ObjSClass);
  end;
  if (IsEnterprise) then begin
    h1 = 15; h2 = 230; h3 = 395;
  end else begin
    h1 = 30; h2 = h1; h3 = 180;
  end;
  if (IsEnterprise) then begin
    CheckBox(h1,vm=(v+=40),0,"Used Accounts only",UsedOnly);
    CheckBox(h1,v+=16,0,"Show References",flags[10]);
  end else begin
    ButtonFrame(h2,vm=(v+=40),123,2,"Sorting");
    RadioButton(h2,v,0,0,"Date and Type",flags[28]);
    RadioButton(h2,v+=16,1,0,"Order of Entry",flags[28]);
    CheckBox(h1,v+=56,0,"Used Accounts only",UsedOnly);
  end;
  CheckBox(h1,v+=16,0,"With _Corrections",flags[1]);
  CheckBox(h1,vm2=(v+=16),0,"Subtotal #VAT# Codes",flags[5]);
  if (IsEnterprise) then begin
    CheckBox(h1,v+=16,0,"Subtotal #VAT# Codes, per Account",flags[27]);
  end;
  CheckBox(h1,v+=16,0,"List Transaction No.",flags[4]); v = v + 16;
  if (IsEnterprise) then begin
    CheckBox(h1,v,0,"Don't print Transaction Prefix",flags[23]); v = v + 16;
  end;
  if (HasMultiCurrency) then begin
    CheckBox(h1,v,0,"Show Cu_rrencies",flags[8]); v = v + 16;
  end;
  if (HasBase2) then begin
    CheckBox(h1,v,0,"Corresponding _Accounts",flags[3]); v = v + 16;
    CheckBox(h1,v,0,"Show Base Currency 2 Differences only",flags[24]);v = v + 16;
  end;
	CheckBox(h1,v,0,"Show comment from purchase operation",CorrM);v = v + 16;// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 February 2018 15:51:55
  if (IsEnterprise) then begin
    ButtonFrame(h2,v=vm,123,2,"Sorting");
    RadioButton(h2,v,0,0,"Date and Type",flags[28]);
    RadioButton(h2,v+=16,1,0,"Order of Entry",flags[28]);
  end;
  if (IsEnterprise) then begin
    CheckBox(h2,v=vm2,0,"_Balances only",ArtMode);
    CheckBox(h2,v+=16,0,"Show _Object",flags[6]);
  end else begin
    CheckBox(h1,v,0,"_Balances only",ArtMode); v = v + 16;
    CheckBox(h1,v,0,"Show zeroes instead of blank strings",flags[20]); v = v + 16;
    if (HasObjects) then begin
      CheckBox(h1,v,0,"Show _Object",flags[6]); v = v + 16;
    end;
    h2 = h1;
  end;
  if (HasAdvancedAccounting) then begin
    CheckBox(h2,v+=16,0,"Not Reconciled",flags[21]);
    CheckBox(h2,v+=16,0,"Reconciled",flags[22]);
  end;
  ButtonFrame(h3,v=(vm),170,3,"Long Lines");
  RadioButton(h3,v,0,0,"Don't Break",flags[7]);
  RadioButton(h3,v+=16,1,0,"Break",flags[7]);
  RadioButton(h3,v+=16,2,0,"Cut",flags[7]);
  if (IsEnterprise) then begin
    ButtonFrame(h3,v+=40,170,3,"Function");
    RadioButton(h3,v,0,0,"Show all Transactions",flags[26]);
    RadioButton(h3,v+=16,1,0,"Show Trans. w/o Doc. No.",flags[26]);
    RadioButton(h3,v+=16,2,0,"Show Trans. with Doc. No.",flags[26]);
    Tile(tilenr,340,false,tilenr,f5); tilenr = tilenr + 1;
    v = 6; h2 = 330;
    EditFieldTL(h,v,140,"Loop 2",M4UStr,Normal,60,f5,false,AccSClass);
    RadioButton(hacc,v,1,0,"Accounts",flags[11]);
    EditFieldTL(h,v+=vs,140,"Loop 3",M4UStr,Normal,60,f6,false,AccSClass);
    RadioButton(hacc,v,2,0,"Accounts",flags[11]);
  end;
  if (HasSimulations and HasModNL) then begin
    h3 = 100;
    if (!IsEnterprise) then begin h3 = 180; end;
    ButtonFrame(h3,vm=(v+=45),170,4,"Include Simulations");
    RadioButton(h3,v,0,0,"None",SimVerf);
    RadioButton(h3,v+=16,1,0,"All",SimVerf);
    RadioButton(h3,v+=16,2,0,"Year End Stage 1",SimVerf);
    RadioButton(h3,v+=16,3,0,"Year End Stage 1 and 2",SimVerf);
  end;
  if (IsEnterprise) then begin
    CheckBox(h3,v+=24,0,"Show zeroes instead of blank strings",flags[20]);
  end;
  if (HasBase2) then begin
    if (IsEnterprise) then begin
      h3 = 300;
      ButtonFrame(h3,v=vm,140,2,"Values in");
    end else begin
      h3 = 180;
      ButtonFrame(h3,v+=40,170,2,"Values in");
    end;
    RadioButton(h3,v,0,0,"Base Currency 1",basecurncy);
    RadioButton(h3,v+=16,1,0,"Base Currency 2",basecurncy);
  end;
  EndWindow;
end;


window APRClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,v,v3,vm,vs;
  WindowBegin("Specify #Purchase Ledger#",APRClass,CGRcW,RcType);
  if (IsEnterprise) then begin
    SetWRect(20,80,527,360);
    Tile(0,25,false,"",f1);
    EditFieldTL(h=150,v=10, 150,"#Supplier#",   M4UStr,Normal,30,f1,false,VESClass);
    TileButtons(v,2);
    Tile(1,340,false,"1",f4);
    v = 6;
    if (HasCategories) then begin
      EditFieldTL(h,v, 50, "Category",   M4UStr,Normal,5,f3,false,VGSClass);
    end;
    if (HasContactClassification) then begin
      EditFieldTL(h,v+=20,250,"Classification",M4UStr,Normal,60,f4,false,CClassSClass);
      EditFieldTL(h,vm=(v+=20) ,70,"Classification Types",M4UStr,Normal,30,f5,false,CTypeSClass);
    end;
    if (HasSalesman or HasSalesmanBonus) then begin
      EditFieldTL(h,v+=20 ,70,"#Salesman#",M4UStr,Normal,10,AccStr,false,UserSClass);
    end;
    if (HasSalesGroup) then begin
      EditFieldTL(h,v+=20 ,50,"Sales Group",M4UStr,Normal,10,f2,false,SalesGroupSClass);
    end;
    if (HasObjects) then begin
      EditFieldTL(h,v+=20 ,150,"Tags/Objects",M4UStr,Normal,60,ObjStr,false,ObjSClass);
    end;
    if (HasMultiCurrency or HasBase2) then begin
      EditFieldTL(h,v+=20, 50, "Currency",M4UStr,Normal,5,CurncyCode,false,CurncyCodeSClass);
    end;
    EditFieldTL(h,v+=20, 70, "Date",   M4Date,Normal,0,d1,false,PasteCurDate);
    EditFieldTL(h,v3=(v+=20), 50, "Creditors A/C",   M4UStr,Normal,10,FirstAcc,false,AccSClass);
    ButtonFrame(h=340,v=vm+20,123,7,"Function");
    RadioButton(h,v,0,0,"Detailed",ArtMode);
    RadioButton(h,v+=16,1,0,"Overview",ArtMode);
    RadioButton(h,v+=16,2,0,"Aged",ArtMode);
    RadioButton(h,v+=16,5,0,"Detailed Aged",ArtMode);
    RadioButton(h,v+=16,3,0,"Balance",ArtMode);
    if (HasMultiCurrency or HasBase2) then begin
      RadioButton(h,v+=16,4,0,"Rate Differences",ArtMode);
      RadioButton(h,v+=16,6,0,"Rate Diff. Detailed",ArtMode);
    end;
    EndFrame;
    if (HasMultiCurrency or HasBase2) then begin
      if (StandardHansa==false) then begin
        ButtonFrame(h=20,v=(vm=(v3+=42)),123,2,"Amounts");
      end else begin
        ButtonFrame(h=20,v=(vm=(v3+=62)),123,2,"Amounts");
      end;
      if (HasBase2) then begin
        RadioButton(h,v,0,0,"Base Currency 1",flags[2]);
      end else begin
        RadioButton(h,v,0,0,"Base Currency",flags[2]);
      end;
      RadioButton(h,v+=16,1,0,"Currency",flags[2]);
      EndFrame;
    end;
    ButtonFrame(h,v+=40,123,2,"Sorting");
    RadioButton(h,v,0,0,"#Supplier#",flags[1]);
    RadioButton(h,v+=16,1,0,"#Supplier# Name",flags[1]);
    ButtonFrame(h+=148,v=vm,140,4,"On Account");
    RadioButton(h,v,0,0,"Include On Account",flags[21]);
    RadioButton(h,v+=16,1,0,"Only On Account",flags[21]);
    RadioButton(h,v+=16,2,0,"Skip On Account",flags[21]);
    CheckBox(h,v+=18,0,"Show Prepayment No.",flags[13]);
    ButtonFrame(h+=168,v=vm,123,2,"Status");
    RadioButton(h,v,0,0,"Open",flags[0]);
    RadioButton(h,v+=16,2,0,"Overdue",flags[0]);
    ButtonFrame(h,v+=40,123,2,"Include");
    RadioButton(h,v,0,0,"Invoice Date",flags[5]);
    RadioButton(h,v+=16,1,0,"Discount Date",flags[5]);
    Tile(2,280,false,"2",Language);
    v = 6; h=150;
    EditFieldTL(h,v, 82, "Payment Term Days",M4Str,Normal,10,f6,false,0);
    if (HasLanguages) then begin
      EditFieldTL(h,v+=20, 82, "Language",M4UStr,Normal,5,Language,false,LangSClass);
    end;
    CheckBox(h,v+=24,0,"Include Prel. Book",flags[3]);
    CheckBox(h,v+=16,0,"Ignore Ordered Payments (with Date Specified Only)",flags[14]);
    if (HasBase2) then begin
      CheckBox(h,v+=16,0,"Show Base Currency 2 Totals",flags[12]);
    end;
    CheckBox(h,v+=16,0,"Show Creditors Accounts",flags[18]);
    if (StandardHansa==false) then begin
      CheckBox(h,v+=16,0,"Show #Instalments#",flags[19]);
    end;
    CheckBox(h,v+=16,0,"Skip on Hold",flags[23]);
    CheckBox(h,v+=16,0,"Include N/L Invoices in backdated Report",flags[24]);
    CheckBox(h,v+=16,0,"Show bank account (only for Overview)",flags[25]);// Edit ************************** BPI Ukraine - KramarAlexandr - Friday, 23 February 2018 17:01:35
    CheckBox(h,v+=16,0,"Show supplier in each row (only for Overview)",flags[26]);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 01 03 2018 y. 15:23:23
    ButtonFrame(h,v+=40,123,3,"Aged Base");
    RadioButton(h,v,0,0,"Due Date",flags[22]);
    RadioButton(h,v+=16,1,0,"Invoice Date",flags[22]);
    RadioButton(h,v+=16,2,0,"Transaction Date",flags[22]);
    /*
    ButtonFrame(h,v +=40,123,2,"Specify");
    RadioButton(h,v,0,0,"Excl. Prepay.",flags[4]);
    RadioButton(h,v+=16,1,0,"Incl. Prepay.",flags[4]);
    */
  end else begin
    SetWRect(20,80,400,300);
    vs = 20;
    EditFieldTL(h=120,v=6,150,"#Supplier#",   M4UStr,Normal,30,f1,false,VESClass);
    if (HasCategories) then begin
      EditFieldTL(h,v+=20, 50,"Category",   M4UStr,Normal,5,f3,false,VGSClass);
    end;
    if (HasObjects) then begin
      EditFieldTL(h,v+=20 ,150,"Tags/Objects",M4UStr,Normal,60,ObjStr,false,ObjSClass);
    end;
    if (HasMultiCurrency or HasBase2) then begin
      EditFieldTL(h,v+=20, 50, "Currency",M4UStr,Normal,5,CurncyCode,false,CurncyCodeSClass);
    end;
    if (HasContactClassification) then begin
      EditFieldTL(h,v+=vs,250,"Classification",M4UStr,Normal,60,f4,false,CClassSClass);
    end;
    EditFieldTL(h,v+=vs, 82,"Date",   M4Date,Normal,0,d1,false,PasteCurDate);
    if (HasLanguages) then begin
      EditFieldTL(h,v+=vs,30,"Language",M4UStr,Normal,5,Language,false,LangSClass);
    end;
    ButtonFrame(h = 30,vm=(v+=40),123,3,"Function");
    RadioButton(h,v,0,0,"Detailed",ArtMode);
    RadioButton(h,v+=16,1,0,"Overview",ArtMode);
    if (HasAged) then begin
      RadioButton(h,v+=16,2,0,"Aged",ArtMode);
    end;
    RadioButton(h,v+=16,3,0,"Balance",ArtMode);
    if (HasAged) then begin
      RadioButton(h,v+=16,4,0,"Detailed Aged",ArtMode);
    end;
    EndFrame;
    if (HasMultiCurrency or HasBase2) then begin
      ButtonFrame(h,v+=40,123,2,"Amounts");
      if (HasBase2) then begin
        RadioButton(h,v,0,0,"Base Currency 1",flags[2]);
      end else begin
        RadioButton(h,v,0,0,"Base Currency",flags[2]);
      end;
      RadioButton(h,v+=16,1,0,"Currency",flags[2]);
      if (HasBase2) then begin
        CheckBox(h,v+=32,0,"Show Base Currency 2 Totals",flags[12]);
      end;
    end;
    if (HasPrepayments) then begin
      if (HasMultiCurrency or HasBase2) then begin 
        CheckBox(h,v+=16,0,"Show Prepayment No.",flags[13]);
      end else begin
        CheckBox(h,v+=32,0,"Show Prepayment No.",flags[13]);
      end;
    end;
    ButtonFrame(h+=148,v = vm,170,2,"Status");
    RadioButton(h,v,0,0,"Open",flags[0]);
    RadioButton(h,v+=16,2,0,"Due",flags[0]);
    ButtonFrame(h,v+=56,170,2,"Sorting");
    RadioButton(h,v,0,0,"#Supplier# No.",flags[1]);
    RadioButton(h,v+=16,1,0,"Name",flags[1]); v = v + 30;
  end;
  EndWindow;
end;