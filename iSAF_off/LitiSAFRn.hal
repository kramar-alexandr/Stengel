// external procedure AutomatedSalesOrderly(string);
external procedure GetVATRow(string,var row VATCodeBlock);
external procedure HT2Per(Date,Date,var string);
external function Boolean GetPMRow(string,var row PMBlock);

function Boolean TestReceiptsCustomers(record RcVc RepSpec,string CustCode)
begin
  Boolean Res,foundsm,testf;
  record IPVc IPr;
  row IPVc IPrw;
  integer i,rwcnt;
  row PMBlock PMrw;

  res = false;
  ResetLoop(IPr);
  foundsm = true;
  IPr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IPr,1,foundsm)) begin
    if (DateInRange(IPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin foundsm = false; end;
    if (foundsm) then begin
      testf = true;
      if (IPr.Invalid!=0) then begin testf = false; end;
      if (IPr.OKFlag==0) then begin testf = false; end;
      GetPMRow(IPr.PayMode,PMrw);
      if (PMrw.CheckType!=kPayModeTypeResource) then begin testf = false; end;
      if (testf) then begin
        if (MatRowCnt(IPr)>0) then begin
          MatRowGet(IPr,0,IPrw);
          if (nonblank(IPrw.CustCode)) then begin
            if (IPrw.CustCode==CustCode) then begin
              res = true;
              foundsm = false;
            end;
          end;
        end;
      end;
    end;
  end;
  TestReceiptsCustomers = res;
  return;
end;

function Boolean TestPaymentsCustomers(record RcVc RepSpec,string CustCode)
begin
  Boolean Res,foundsm,testf;
  record OPVc OPr;
  row OPVc OPrw;
  integer i,rwcnt;
  row PMBlock PMrw;

  res = false;
  ResetLoop(OPr);
  foundsm = true;
  OPr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",OPr,1,foundsm)) begin
    if (DateInRange(OPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin foundsm = false; end;
    if (foundsm) then begin
      testf = true;
      if (OPr.Invalid!=0) then begin testf = false; end;
      if (OPr.DoneFlag==0) then begin testf = false; end;
      GetPMRow(OPr.PayMode,PMrw);
      if (PMrw.CheckType!=kPayModeTypeResource) then begin testf = false; end;
      if (testf) then begin
        if (MatRowCnt(OPr)>0) then begin
          MatRowGet(OPr,0,OPrw);
          if (nonblank(OPrw.VECode)) then begin
            if (OPrw.VECode==CustCode) then begin
              res = true;
              foundsm = false;
            end;
          end;
        end;
      end;
    end;
  end;
  TestPaymentsCustomers = res;
  return;
end;

procedure ExportSAFCountryTag(string DelAddr4,string InvAddr4,string CountryCode,boolean CheckBlankf)
begin
  record CountryVc Countryr;

  if (nonblank(DelAddr4)) then begin
    Countryr.Comment = DelAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)) then begin
      if (nonblank(Countryr.Code) and len(CountryCode)<3) then begin
        OutString(440,0,Countryr.Code,false);
      end else begin
        if (CheckBlankf) then begin
          OutString(440,0,USetStr(26701),false);
        end else begin
          OutString(440,0,"LT",false);
        end;
      end;
    end;
    goto LExportSAFTCountryTag;
  end;

  if (nonblank(InvAddr4)) then begin
    Countryr.Comment = InvAddr4;
    if (ReadFirstKey("Comment",Countryr,1,true)) then begin
      if (len(Countryr.Code)<3) then begin
        OutString(440,0,Countryr.Code,false);
      end else begin
        OutString(440,0,"LT",false);
      end;
    end else begin
      if (nonblank(CountryCode) and len(CountryCode)<3) then begin
        OutString(440,0,CountryCode,false);
      end else begin
        if (CheckBlankf) then begin
          OutString(440,0,USetStr(26701),false);
        end else begin
          OutString(440,0,"LT",false);
        end;
      end;
    end;
  end else begin
    if (nonblank(CountryCode) and len(CountryCode)<3) then begin
      OutString(440,0,CountryCode,false);
    end else begin
      if (CheckBlankf) then begin
        OutString(440,0,USetStr(26701),false);
      end else begin
        OutString(440,0,"LT",false);
      end;
    end;
  end;
LExportSAFTCountryTag:;
  return;
end;

procedure GetPInvoicesSums(record VIVc VIr,var record IVVc VirtVatr,var integer results)
begin
  integer rwcnt,rwcnt1,j,i;
  row VIVc VIrw;
  row IVVc VirtVatrw;
  Boolean found;
  row VATCodeBlock VATCbrw;

  results = 0;
  rwcnt = MatRowCnt(VIr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(VIr,i,VIrw);
    if (nonblank(VIrw.VATCode)) then begin
      found = false;
      rwcnt1 = MatRowCnt(VirtVatr);
      for (j=0;j<rwcnt1;j=j+1) begin
        MatRowGet(VirtVatr,j,VirtVatrw);
        if (VirtVatrw.VATCode==VIrw.VATCode) then begin
          found = true;
          GetVATRow(VIrw.VATCode,VATCbrw);
          VirtVatrw.Sum = VirtVatrw.Sum + VIrw.Sum;
          VirtVatrw.BasePrice = VirtVatrw.BasePrice + (VIrw.Sum * (VATCbrw.ExVatpr/100));
          results = results + 1;
          MatRowPut(VirtVatr,j,VirtVatrw);
          goto LNext;
        end;
      end;
      if (found==false) then begin
        MatRowGet(VirtVatr,rwcnt1,VirtVatrw);
        GetVATRow(VIrw.VATCode,VATCbrw);
        VirtVatrw.Sum = VIrw.Sum;
        VirtVatrw.BasePrice = VirtVatrw.Sum * (VATCbrw.ExVatpr/100);
        VirtVatrw.VATCode = VIrw.VATCode;
        VirtVatrw.Price = VATCbrw.ExVatpr;
        MatRowPut(VirtVatr,rwcnt1,VirtVatrw);
        results = results + 1;
      end;
LNext:;
    end;
  end;

  return;
end;

procedure GetInvoicesSums(record IVVc IVr,var record IVVc VirtVatr,var integer results)
begin
  integer rwcnt,rwcnt1,j,i;
  row IVVc IVrw;
  row IVVc VirtVatrw;
  Boolean found;
  row VATCodeBlock VATCbrw;

  results = 0;
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    if (nonblank(IVrw.VATCode)) then begin
      found = false;
      rwcnt1 = MatRowCnt(VirtVatr);
      for (j=0;j<rwcnt1;j=j+1) begin
        MatRowGet(VirtVatr,j,VirtVatrw);
        if (VirtVatrw.VATCode==IVrw.VATCode) then begin
          found = true;
          GetVATRow(IVrw.VATCode,VATCbrw);
          VirtVatrw.Sum = VirtVatrw.Sum + IVrw.Sum;
          VirtVatrw.BasePrice = VirtVatrw.BasePrice + (IVrw.Sum * (VATCbrw.ExVatpr/100));
          results = results + 1;
          MatRowPut(VirtVatr,j,VirtVatrw);
          goto LNext1;
        end;
      end;
      if (found==false) then begin
        MatRowGet(VirtVatr,rwcnt1,VirtVatrw);
        GetVATRow(IVrw.VATCode,VATCbrw);
        VirtVatrw.Sum = IVrw.Sum;
        VirtVatrw.BasePrice = VirtVatrw.Sum * (VATCbrw.ExVatpr/100);
        VirtVatrw.VATCode = IVrw.VATCode;
        VirtVatrw.Price = VATCbrw.ExVatpr;
        MatRowPut(VirtVatr,rwcnt1,VirtVatrw);
        results = results + 1;
      end;
LNext1:;
    end;
  end;

  return;
end;

function boolean CheckIVVATCode(string sernr, string vat)
begin
  record IVVc IVr;
  row IVVc IVrw;
  integer i, cnt, vcnt;

  IVr.SerNr = sernr;
  vcnt = 0;
  if (ReadFirstMain(IVr,1,true)) then
  begin
    cnt = MatRowCnt(IVr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(IVr, i, IVrw);
        if (IVrw.Sum!=0) and (SetInSet(IVrw.VATCode,vat)) then begin
        vcnt = vcnt + 1;
      end;
    end;

  end;
  CheckIVVATCode = (vcnt>0);
  return;
end;

function boolean CheckVIVATCode(string sernr, string vat)
begin
  record VIVc VIr;
  row VIVc VIrw;
  integer i, cnt, vcnt;

  VIr.SerNr = sernr;
  vcnt = 0;
  if (ReadFirstMain(VIr,1,true)) then
  begin
    cnt = MatRowCnt(VIr);
    for (i=0;i<cnt;i=i+1) begin
      MatRowGet(VIr, i, VIrw);
        if (VIrw.Sum!=0) and (SetInSet(VIrw.VATCode,vat)) then begin
        vcnt = vcnt + 1;
      end;
    end;

  end;
  CheckVIVATCode = (vcnt>0);
  return;
end;

procedure ExportCustomers(record RcVc RepSpec)
begin
  record CUVc CUr;
  Boolean found,testf,found1;
  record IVVc IVr,VirtVatr;
  Integer cnt,results;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(39710),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(39711),false);
  OutString(50,0,USetStr(39712),false);
  OutString(250,0,USetStr(39713),false);
  OutString(350,0,USetStr(39714),false);
  OutString(440,0,USetStr(39715),false);
  EndFormat;
  Gray_Divider(0,1);

  found = true;
  cnt = 0;
  while (LoopMain(CUr,1,found)) begin
    if (found) then begin
      ResetLoop(IVr);
      found1 = true;
      IVr.TransDate = RepSpec.sStartDate;
      while (LoopKey("TransDate",IVr,1,found1)) begin
        testf = true;
        results = 0;
        found1 = DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate);
        if (found1) then begin
          if (IVr.CustCode!=CUr.Code) then begin
            testf = false;
          end;
          if (IVr.OKFlag==0) then begin testf = false; end;
          if (nonblank(RepSpec.f1) and SetInSet(IVr.PayDeal, RepSpec.f1)==false) then begin
            testf = false;
          end;
          if (nonblank(RepSpec.f2) and testf) then begin
            testf = CheckIVVATCode(IVr.SerNr, RepSpec.f2);
          end;
          if (found1 and testf) then begin
            RecordNew(VirtVatr);
            GetInvoicesSums(IVr,VirtVatr,results);
          end;
          if (results>0 and found1 and testf and IVr.CustCode==CUr.Code) then begin
            goto LFound1;
          end;
        end else begin
          testf = false;
        end;
      end;
LFound1:;
      if (testf==false) then begin
        if (RepSpec.flags[0]==1) then begin
          testf = TestReceiptsCustomers(RepSpec,CUr.Code);
        end;
      end;
      if (testf) then begin
        cnt = cnt + 1;
        StartFormat(15);
        OutString(0,"DblCUVc",CUr.Code,false);
        if (blank(CUr.Name)) then begin
          OutString(50,0,USetStr(26701),false);
        end else begin
          OutString(50,0,left(CUr.Name,100),false);
        end;
        if (RepSpec.flags[8]==0) then begin
          if (nonblank(CUr.VATNr)) then begin
            OutString(250,0,CUr.VATNr,false);
          end else begin
            OutString(250,0,"ND",false);
          end;
          if (nonblank(CUr.RegNr1)) then begin
            OutString(350,0,CUr.RegNr1,false);
          end else begin
            OutString(350,0,"ND",false);
          end;
        end else begin
          if (nonblank(CUr.RegNr1)) then begin
            OutString(250,0,CUr.RegNr1,false);
          end else begin
            OutString(250,0,"ND",false);
          end;
          if (nonblank(CUr.VATNr)) then begin
            OutString(350,0,CUr.VATNr,false);
          end else begin
            OutString(350,0,"ND",false);
          end;
        end;
        ExportSAFCountryTag("",CUr.InvAddr4,CUr.CountryCode,false);
        EndFormat;
      end;
    end;
  end;

  if (cnt==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(39700),false);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end else begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;

  return;
end;

procedure ExportSuppliers(record RcVc RepSpec)
begin
  record CUVc CUr;
  Boolean found,testf,found1;
  record VIVc VIr;
  record ExpVc Expr;
  row ExpVc Exprw;
  record IVVc VirtVatr;
  Integer cnt,results,i,rwc;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(39717),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(39716),false);
  OutString(50,0,USetStr(39712),false);
  OutString(250,0,USetStr(39713),false);
  OutString(350,0,USetStr(39714),false);
  OutString(440,0,USetStr(39715),false);
  EndFormat;
  Gray_Divider(0,1);

  found = true;
  cnt = 0;
  while (LoopMain(CUr,1,found)) begin
    if (found) then begin
      ResetLoop(VIr);
      found1 = true;
      VIr.TransDate = RepSpec.sStartDate;
      while (LoopKey("TransDate",VIr,1,found1)) begin
        testf = true;
        results = 0;
        found1 = DateInRange(VIr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate);
        if (found1) then begin
          if (VIr.VECode!=CUr.Code) then begin
            testf = false;
          end;
          if (VIr.OKFlag==0) then begin testf = false; end;
          if (nonblank(RepSpec.f1) and SetInSet(VIr.PayDeal, RepSpec.f1)==false) then begin
            testf = false;
          end;
          if (nonblank(RepSpec.f2) and testf) then begin
            testf = CheckVIVATCode(VIr.SerNr, RepSpec.f2);
          end;
          if (found1 and testf) then begin
            RecordNew(VirtVatr);
            GetPInvoicesSums(VIr,VirtVatr,results);
          end;
          if (results>0 and found1 and testf and VIr.VECode==CUr.Code) then begin
            goto LFound;
          end;
        end else begin
          testf = false;
        end;
      end;
      //EBS -->
      ResetLoop(Expr);
      Expr.TransDate = RepSpec.sStartDate;
      found1 = true;
      While LoopKey("TransDate",Expr,1,found1) begin
        testf = true;
        results = 0;
        found1 = DateInRange(Expr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate);
        if !found1 then begin
          testf = false;
        end;
        if (found1) then begin
          if (Expr.OKFlag==0) then begin testf = false; end;
          if testf then begin
            rwc = MatRowCnt(Expr);
            for(i=0;i<rwc;i=i+1)begin
              MatRowGet(Expr,i,Exprw);
              testf = true;
              if Exprw.VECode!=CUr.Code then begin
                testf = false;
              end;
              if nonblank(RepSpec.f2) and Exprw.VATCode!=RepSpec.f2 then begin
                testf = false;
              end;
              if testf then begin
                goto LFound;
              end;
            end;
          end;
        end;
      end;
      //EBS <--
LFound:;
      if (testf==false) then begin
        if (RepSpec.flags[0]==1) then begin
          testf = TestPaymentsCustomers(RepSpec,CUr.Code);
        end;
      end;
      if (testf) then begin
        cnt = cnt + 1;
        StartFormat(15);
        OutString(0,"DblCUVc",CUr.Code,false);
        if (blank(CUr.Name)) then begin
          OutString(50,0,USetStr(26701),false);
        end else begin
          OutString(50,0,left(CUr.Name,100),false);
        end;
        if (RepSpec.flags[8]==0) then begin
          if (nonblank(CUr.VATNr)) then begin
            OutString(250,0,CUr.VATNr,false);
          end else begin
            OutString(250,0,"ND",false);
          end;
          if (nonblank(CUr.RegNr1)) then begin
            OutString(350,0,CUr.RegNr1,false);
          end else begin
            OutString(350,0,"ND",false);
          end;
        end else begin
          if (nonblank(CUr.RegNr1)) then begin
            OutString(250,0,CUr.RegNr1,false);
          end else begin
            OutString(250,0,"ND",false);
          end;
          if (nonblank(CUr.VATNr)) then begin
            OutString(350,0,CUr.VATNr,false);
          end else begin
            OutString(350,0,"ND",false);
          end;
        end;
        ExportSAFCountryTag("",CUr.InvAddr4,CUr.CountryCode,false);
        EndFormat;
      end;
    end;
  end;

  if (cnt==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(39700),false);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end else begin
    Gray_Divider(0,1);
    StartFormat(15);
    EndFormat;
  end;

  return;
end;

procedure ExportExpenses(record RcVc RepSpec)
begin
  record ExpVc Expr;
  row ExpVc Exprw;
  Boolean found,testf;
  record CUVc CUr;
  row VATCodeBlock VATCbrw;
  row IVVc VirtVatrw;
  integer results,i,rwcnt,cnt,rwc;
  string 255 tstr;
  record PDVc PDr;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(16211),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  cnt = 0;
  found = true;
  Expr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",Expr,1,found)) begin
    tstr = "";
    testf = true;
    results = 0;
    found = DateInRange(Expr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate);
    if (Expr.OKFlag==0) then begin testf = false; end;
    if testf then begin
      rwc = MatRowCnt(Expr);
      for(i=0;i<rwc;i=i+1)begin
        MatRowGet(Expr,i,Exprw);
        if nonblank(RepSpec.f2) and RepSpec.f2!=Exprw.VATCode then begin
          testf = false;
        end;
        if blank(Exprw.DocNr) then begin
          testf = false;
        end;
        if nonblank(RepSpec.f3) and Exprw.VECode!=RepSpec.f3 then begin
          testf = false;
        end;
        if blank(Exprw.VECode) then begin
          testf = false;
        end;
        if testf then begin
          cnt = cnt + 1;
          Gray_Divider(0,1);
          StartFormat(15);
          OutString(0,0,USetStr(39719),false);
          OutString(50,0,USetStr(39720),false);
          OutString(100,0,USetStr(39721),false);
          OutString(300,0,USetStr(39722),false);
          OutString(380,0,USetStr(39723),true);
          OutString(430,0,USetStr(39724),true);
          OutString(480,0,USetStr(39725),true);
          EndFormat;

          tstr = Exprw.DocNr;
          GetVATRow(Exprw.VATCode,VATCbrw);

          OutStringID(0,"DblExpVc",tstr,false,Expr.SerNr);
          OutString(50,0,DateToString(Exprw.ExpDate,"YYYY-MM-DD"),false);
          OutString(100,0,"SF",false);
          OutString(300,0,Exprw.VATCode,false);
          OutString(380,0,ValToString(Exprw.VATSum,M4Val,"",".",0),true);
          OutString(430,0,ValToString(VATCbrw.ExVatpr,M4Val,"",".",0),true);
          OutString(480,0,ValToString(Exprw.Sum - Exprw.VATSum,M4Val,"",".",0),true);
          EndFormat;

          StartFormat(15);
          EndFormat;
          StartFormat(15);
          CUr.Code = Exprw.VECode;
          ReadFirstMain(CUr,1,true);
          StartFormat(15);
          OutString(0,0,USetStr(39716),false);
          OutString(50,0,USetStr(39712),false);
          OutString(250,0,USetStr(39713),false);
          OutString(350,0,USetStr(39714),false);
          OutString(440,0,USetStr(39715),false);
          EndFormat;
          OutString(0,"DblCUVc",CUr.Code,false);
          if (blank(CUr.Name)) then begin
            OutString(50,0,USetStr(26701),false);
          end else begin
            OutString(50,0,left(CUr.Name,100),false);
          end;
          if (RepSpec.flags[8]==0) then begin
            if (nonblank(CUr.VATNr)) then begin
              OutString(250,0,CUr.VATNr,false);
            end else begin
              OutString(250,0,"ND",false);
            end;
            if (nonblank(CUr.RegNr1)) then begin
              OutString(350,0,CUr.RegNr1,false);
            end else begin
              OutString(350,0,"ND",false);
            end;
          end else begin
            if (nonblank(CUr.RegNr1)) then begin
              OutString(250,0,CUr.RegNr1,false);
            end else begin
              OutString(250,0,"ND",false);
            end;
            if (nonblank(CUr.VATNr)) then begin
              OutString(350,0,CUr.VATNr,false);
            end else begin
              OutString(350,0,"ND",false);
            end;
          end;
          ExportSAFCountryTag("",CUr.InvAddr4,CUr.CountryCode,false);
          EndFormat;
          StartFormat(15);
          EndFormat;
          Gray_Divider(0,1);
        end;
      end;
    end;
  end;

  if (cnt==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(39700),false);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end else begin
    StartFormat(15);
    EndFormat;
  end;

  return;
end;

procedure ExportPurchaseInvoices(record RcVc RepSpec)
begin
  record VIVc VIr,DCVIr;
  row VIVc VIrw;
  Boolean found,testf;
  record CUVc CUr;
  record IVVc VirtVatr;
  row IVVc VirtVatrw;
  integer results,i,rwcnt,cnt;
  string 255 tstr;
  record PDVc PDr;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(39718),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  cnt = 0;
  found = true;
  VIr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",VIr,1,found)) begin
    tstr = "";
    testf = true;
    results = 0;
    found = DateInRange(VIr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate);
    if (VIr.OKFlag==0) then begin testf = false; end;
    if (nonblank(RepSpec.f1) and SetInSet(VIr.PayDeal, RepSpec.f1)) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2) and testf) then begin
      testf = CheckVIVATCode(VIr.SerNr, RepSpec.f2);
    end;
    if (nonblank(RepSpec.f3) and VIr.VECode!=RepSpec.f3) then begin
      testf = false;
    end;
    if (found and testf) then begin
      RecordNew(VirtVatr);
      GetPInvoicesSums(VIr,VirtVatr,results);
    end;
    if (results>0 and found and testf) then begin
      cnt = cnt + 1;
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(0,0,USetStr(39719),false);
      OutString(50,0,USetStr(39720),false);
      OutString(100,0,USetStr(39721),false);
      if (VIr.ServiceDelDate!=VIr.InvDate and nonblank(VIr.ServiceDelDate)) then begin
        OutString(250,0,USetStr(39733),false);
      end;
      OutString(300,0,USetStr(39722),false);
      OutString(380,0,USetStr(39723),true);
      OutString(430,0,USetStr(39724),true);
      OutString(480,0,USetStr(39725),true);
      EndFormat;

      if (VIr.InvoiceNr!="") then begin
        tstr = VIr.InvoiceNr;
      end else begin
        tstr = VIr.SerNr;
      end;
      OutStringID(0,"DblVIVc",tstr,false,VIr.SerNr);
      OutString(50,0,DateToString(VIr.TransDate,"YYYY-MM-DD"),false);
      if (VIr.InvType==kInvoiceTypeCredit) then begin
        OutString(100,0,"DS",false);
      end else begin
        if (VIr.Invalid!=0) then begin
          OutString(100,0,"AN",false);
        end else begin
          if (VIr.InvType==kInvoiceTypeDebit) then begin
            OutString(100,0,"KS",false);
          end else begin
            OutString(100,0,"SF",false);
          end;
        end;
      end;
      PDr.Code = VIr.PayDeal;
      ReadFirstMain(PDr,1,true);
      if (PDr.PDType==10) then begin
        OutString(130,0,"T",false);
      end;
      if (VIr.InvType==kInvoiceTypeDebit or VIr.InvType==kInvoiceTypeCredit) then begin
        DCVIr.SerNr = VIr.CredInv;
        ReadFirstMain(DCVIr,1,true);
        OutStringID(200,"DblVIVc",RepSpec.f4 & DCVIr.SerNr,true,DCVIr.SerNr);
        OutString(210,0,DateToString(DCVIr.TransDate,"YYYY-MM-DD"),false);
      end;
      if (VIr.ServiceDelDate!=VIr.InvDate and nonblank(VIr.ServiceDelDate)) then begin
        OutString(250,0,DateToString(VIr.ServiceDelDate,"YYYY-MM-DD"),false);
      end;
      rwcnt = MatRowCnt(VirtVatr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VirtVatr,i,VirtVatrw);
        if (i>0) then begin
          StartFormat(15);
        end;
        OutString(300,0,VirtVatrw.VATCode,false);
        OutString(380,0,ValToString(VirtVatrw.BasePrice,M4Val,"",".",0),true);
        OutString(430,0,ValToString(VirtVatrw.Price,M4Val,"",".",0),true);
        OutString(480,0,ValToString(VirtVatrw.Sum,M4Val,"",".",0),true);
        EndFormat;
      end;
      StartFormat(15);
      EndFormat;
      StartFormat(15);
      CUr.Code = VIr.VECode;
      ReadFirstMain(CUr,1,true);
      StartFormat(15);
      OutString(0,0,USetStr(39716),false);
      OutString(50,0,USetStr(39712),false);
      OutString(250,0,USetStr(39713),false);
      OutString(350,0,USetStr(39714),false);
      OutString(440,0,USetStr(39715),false);
      EndFormat;
      OutString(0,"DblCUVc",CUr.Code,false);
      if (blank(CUr.Name)) then begin
        OutString(50,0,USetStr(26701),false);
      end else begin
        OutString(50,0,left(CUr.Name,100),false);
      end;
      if (RepSpec.flags[8]==0) then begin
        if (nonblank(CUr.VATNr)) then begin
          OutString(250,0,CUr.VATNr,false);
        end else begin
          OutString(250,0,"ND",false);
        end;
        if (nonblank(CUr.RegNr1)) then begin
          OutString(350,0,CUr.RegNr1,false);
        end else begin
          OutString(350,0,"ND",false);
        end;
      end else begin
        if (nonblank(CUr.RegNr1)) then begin
          OutString(250,0,CUr.RegNr1,false);
        end else begin
          OutString(250,0,"ND",false);
        end;
        if (nonblank(CUr.VATNr)) then begin
          OutString(350,0,CUr.VATNr,false);
        end else begin
          OutString(350,0,"ND",false);
        end;
      end;
      ExportSAFCountryTag("",CUr.InvAddr4,CUr.CountryCode,false);
      EndFormat;
      StartFormat(15);
      EndFormat;
      Gray_Divider(0,1);
    end;
  end;

  if (cnt==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(39700),false);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end else begin
    StartFormat(15);
    EndFormat;
  end;

  return;
end;

procedure ExportInvoices(record RcVc RepSpec)
begin
  record IVVc IVr,CDIVr;
  row IVVc IVrw;
  Boolean found,testf;
  record CUVc CUr;
  record IVVc VirtVatr;
  row IVVc VirtVatrw;
  integer results,i,rwcnt,cnt;
  string 255 tstr;
  record PDVc PDr;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(39726),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  cnt = 0;
  found = true;
  IVr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IVr,1,found)) begin
    tstr = "";
    testf = true;
    results = 0;

    found = DateInRange(IVr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate);
    if (IVr.OKFlag==0) then begin testf = false; end;
    if (nonblank(RepSpec.f1) and SetInSet(IVr.PayDeal, RepSpec.f1)) then begin
      testf = false;
    end;
    if (nonblank(RepSpec.f2)) then begin
      testf = CheckIVVATCode(IVr.SerNr, RepSpec.f2);
    end;
    if (nonblank(RepSpec.f3) and IVr.CustCode!=RepSpec.f3) then begin
      testf = false;
    end;
    if (found and testf) then begin
      RecordNew(VirtVatr);
      GetInvoicesSums(IVr,VirtVatr,results);
    end;
    if (results>0 and found and testf) then begin
      cnt = cnt + 1;
      Gray_Divider(0,1);
      StartFormat(15);
      OutString(0,0,USetStr(39719),false);
      OutString(50,0,USetStr(39720),false);
      OutString(100,0,USetStr(39721),false);
      if (IVr.ServiceDelDate!=IVr.InvDate and nonblank(IVr.ServiceDelDate)) then begin
        OutString(250,0,USetStr(39733),false);
      end;
      OutString(300,0,USetStr(39722),false);
      OutString(380,0,USetStr(39723),true);
      OutString(430,0,USetStr(39724),true);
      OutString(480,0,USetStr(39725),true);
      EndFormat;

      if (nonblank(IVr.OfficialSerNr)) then begin
        tstr = IVr.OfficialSerNr;
      end else begin
        if (nonblank(RepSpec.f4)) then begin
          if (IVr.SerNr>0) then begin
            tstr = RepSpec.f4 & IVr.SerNr;
          end else begin
            tstr = IVr.OfficialSerNr;
          end;
        end else begin
          tstr = IVr.OfficialSerNr;
        end;
      end;
      OutStringID(0,"Dbl3IVVc",tstr,false,IVr.SerNr);
      OutString(50,0,DateToString(IVr.TransDate,"YYYY-MM-DD"),false);
      if (IVr.InvType==kInvoiceTypeCredit) then begin
        OutString(100,0,"KS",false);
      end else begin
        if (IVr.Invalid!=0) then begin
          OutString(100,0,"AN",false);
        end else begin
          if (IVr.InvType==kInvoiceTypeDebit) then begin
            OutString(100,0,"DS",false);
          end else begin
            OutString(100,0,"SF",false);
          end;
        end;
      end;
      PDr.Code = IVr.PayDeal;
      ReadFirstMain(PDr,1,true);
      if (PDr.PDType==10) then begin
        OutString(130,0,"T",false);
      end;
      if (IVr.InvType==kInvoiceTypeDebit or IVr.InvType==kInvoiceTypeCredit) then begin
        MatRowGet(IVr,0,IVrw);
        CDIVr.SerNr = IVrw.OrdRow;
        ReadFirstMain(CDIVr,1,true);
        OutStringID(200,"Dbl3IVVc",RepSpec.f4 & CDIVr.SerNr,true,CDIVr.SerNr);
        OutString(210,0,DateToString(CDIVr.TransDate,"YYYY-MM-DD"),false);
      end;
      if (IVr.ServiceDelDate!=IVr.InvDate and nonblank(IVr.ServiceDelDate)) then begin
        OutString(250,0,DateToString(IVr.ServiceDelDate,"YYYY-MM-DD"),false);
      end;
      rwcnt = MatRowCnt(VirtVatr);
      for (i=0;i<rwcnt;i=i+1) begin
        MatRowGet(VirtVatr,i,VirtVatrw);
        if (i>0) then begin
          StartFormat(15);
        end;
        OutString(300,0,VirtVatrw.VATCode,false);
        OutString(380,0,ValToString(VirtVatrw.BasePrice,M4Val,"",".",0),true);
        OutString(430,0,ValToString(VirtVatrw.Price,M4Val,"",".",0),true);
        OutString(480,0,ValToString(VirtVatrw.Sum,M4Val,"",".",0),true);
        EndFormat;
      end;
      StartFormat(15);
      EndFormat;
      StartFormat(15);
      CUr.Code = IVr.CustCode;
      ReadFirstMain(CUr,1,true);
      StartFormat(15);
      OutString(0,0,USetStr(39711),false);
      OutString(50,0,USetStr(39712),false);
      OutString(250,0,USetStr(39713),false);
      OutString(350,0,USetStr(39714),false);
      OutString(440,0,USetStr(39715),false);
      EndFormat;
      OutString(0,"DblCUVc",CUr.Code,false);
      if (blank(CUr.Name)) then begin
        OutString(50,0,USetStr(26701),false);
      end else begin
        OutString(50,0,left(CUr.Name,100),false);
      end;
      if (RepSpec.flags[8]==0) then begin
        if (nonblank(CUr.VATNr)) then begin
          OutString(250,0,CUr.VATNr,false);
        end else begin
          OutString(250,0,"ND",false);
        end;
        if (nonblank(CUr.RegNr1)) then begin
          OutString(350,0,CUr.RegNr1,false);
        end else begin
          OutString(350,0,"ND",false);
        end;
      end else begin
        if (nonblank(CUr.RegNr1)) then begin
          OutString(250,0,CUr.RegNr1,false);
        end else begin
          OutString(250,0,"ND",false);
        end;
        if (nonblank(CUr.VATNr)) then begin
          OutString(350,0,CUr.VATNr,false);
        end else begin
          OutString(350,0,"ND",false);
        end;
      end;
      ExportSAFCountryTag("",CUr.InvAddr4,CUr.CountryCode,false);
      EndFormat;
      StartFormat(15);
      EndFormat;
      Gray_Divider(0,1);
    end;
  end;

  if (cnt==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(39700),false);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end else begin
    StartFormat(15);
    EndFormat;
  end;

  return;
end;

procedure ExportPayments(record RcVc RepSpec)
begin
  Boolean found,testf;
  record OPVc OPr;
  row OPVc OPrw;
  integer i,rwcnt;
  record VIVc VIr;
  record CUVc CUr;
  string 255 tstr;
  row PMBlock PMrw;
  Integer cnt;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(39727),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(39719),false);
  OutString(50,0,USetStr(39720),false);
  OutString(110,0,USetStr(39728),false);
  OutString(220,0,USetStr(39729),false);
  OutString(280,0,USetStr(39713),false);
  OutString(420,0,USetStr(39730),true);
  OutString(480,0,USetStr(39731),true);
  EndFormat;
  Gray_Divider(0,1);

  ResetLoop(OPr);
  cnt = 0;
  found = true;
  OPr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",OPr,1,found)) begin
    if (DateInRange(OPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (OPr.Invalid!=0) then begin testf = false; end;
      if (OPr.DoneFlag==0) then begin testf = false; end;
      GetPMRow(OPr.PayMode,PMrw);
      if (PMrw.CheckType!=kPayModeTypeResource) then begin testf = false; end;
      if (testf) then begin
        cnt = cnt + 1;
        rwcnt = MatRowCnt(OPr);
        for (i=0;i<rwcnt;i=i+1) begin
          tstr = "";
          MatRowGet(OPr,i,OPrw);
          StartFormat(15);
          OutString(0,"DblOPVc",OPr.SerNr,false);
          OutString(50,0,DateToString(OPr.TransDate,"YYYY-MM-DD"),false);

          if (nonblank(RepSpec.f4)) then begin
            if (OPrw.VISerNr>0) then begin
              tstr = RepSpec.f4 & OPrw.VISerNr;
            end else begin
              tstr = "";
            end;
          end else begin
            tstr = OPrw.VISerNr;
          end;
          OutStringID(110,"DblVIVc",tstr,false,OPrw.VISerNr);
          VIr.SerNr = OPrw.VISerNr;
          ReadFirstMain(VIr,1,true);
          OutString(220,0,DateToString(VIr.TransDate,"YYYY-MM-DD"),false);
          CUr.Code = OPrw.VECode;
          ReadFirstMain(CUr,1,true);

          if (RepSpec.flags[8]==0) then begin
            if (nonblank(CUr.VATNr)) then begin
              OutStringID(280,"DblCUVc",CUr.VATNr,false,CUr.Code);
            end else begin
              OutStringID(280,"DblCUVc","ND",false,CUr.Code);
            end;
          end else begin
            if (nonblank(CUr.RegNr1)) then begin
              OutStringID(280,"DblCUVc",CUr.RegNr1,false,CUr.Code);
            end else begin
              OutStringID(280,"DblCUVc","ND",false,CUr.Code);
            end;
          end;
          OutString(420,0,ValToString(OPrw.BankVal,M4Val,"",".",0),true);
          OutString(480,0,ValToString(OPrw.VATVal,M4Val,"",".",0),true);
          EndFormat;
          Gray_Divider(0,1);
        end;
      end;
    end;
  end;

  if (cnt==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(39700),false);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end else begin
    StartFormat(15);
    EndFormat;
  end;

  return;
end;

procedure ExportReceipts(record RcVc RepSpec)
begin
  record IPVc IPr;
  row IPVc IPrw;
  Boolean found,testf;
  integer i,rwcnt;
  record IVVc IVr;
  record CUVc CUr;
  string 255 tstr;
  row PMBlock PMrw;
  Integer cnt;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(39732),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(39719),false);
  OutString(50,0,USetStr(39720),false);
  OutString(110,0,USetStr(39728),false);
  OutString(220,0,USetStr(39729),false);
  OutString(280,0,USetStr(39713),false);
  OutString(420,0,USetStr(39730),true);
  OutString(480,0,USetStr(39731),true);
  EndFormat;
  Gray_Divider(0,1);

  ResetLoop(IPr);
  cnt = 0;
  found = true;
  IPr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",IPr,1,found)) begin
    if (DateInRange(IPr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin found = false; end;
    if (found) then begin
      testf = true;
      if (IPr.Invalid!=0) then begin testf = false; end;
      if (IPr.OKFlag==0) then begin testf = false; end;
      GetPMRow(IPr.PayMode,PMrw);
      if (PMrw.CheckType!=kPayModeTypeResource) then begin testf = false; end;
      if (testf) then begin
        cnt = cnt + 1;
        rwcnt = MatRowCnt(IPr);
        for (i=0;i<rwcnt;i=i+1) begin
          tstr = "";
          MatRowGet(IPr,i,IPrw);
          StartFormat(15);
          OutString(0,"DblIPVc",IPr.SerNr,false);
          OutString(50,0,DateToString(IPr.TransDate,"YYYY-MM-DD"),false);
          if (nonblank(RepSpec.f4)) then begin
            if (IPrw.InvoiceNr>0) then begin
              tstr = RepSpec.f4 & IPrw.InvoiceNr;
            end else begin
              tstr = "";
            end;
          end else begin
            tstr = IPrw.InvoiceNr;
          end;
          OutStringID(110,"Dbl3IVVc",tstr,false,IPrw.InvoiceNr);
          IVr.SerNr = IPrw.InvoiceNr;
          ReadFirstMain(IVr,1,true);
          OutString(220,0,DateToString(IVr.TransDate,"YYYY-MM-DD"),false);
          CUr.Code = IPrw.CustCode;
          ReadFirstMain(CUr,1,true);
          if (RepSpec.flags[8]==0) then begin
            if (nonblank(CUr.VATNr)) then begin
              OutStringID(280,"DblCUVc",CUr.VATNr,false,CUr.Code);
            end else begin
              OutStringID(280,"DblCUVc","ND",false,CUr.Code);
            end;
          end else begin
            if (nonblank(CUr.RegNr1)) then begin
              OutStringID(280,"DblCUVc",CUr.RegNr1,false,CUr.Code);
            end else begin
              OutStringID(280,"DblCUVc","ND",false,CUr.Code);
            end;
          end;
          OutString(420,0,ValToString(IPrw.BankVal,M4Val,"",".",0),true);
          OutString(480,0,ValToString(IPrw.VATVal,M4Val,"",".",0),true);
          EndFormat;
          Gray_Divider(0,1);
        end;
      end;
    end;
  end;

  if (cnt==0) then begin
    StartFormat(15);
    OutString(0,0,USetStr(39700),false);
    EndFormat;
    StartFormat(15);
    EndFormat;
  end else begin
    StartFormat(15);
    EndFormat;
  end;

  return;
end;


global
procedure LitiSAFRn(record RcVc RepSpec)
begin

  record CYBlock CYb;
  string 255 filname,tstr;
  record CUVc BranchIDr;
  record CUVc AccBr;
  Integer rw;

  BlockLoad(CYb);

  StartReportJob(USetStr(39701));
  HT2Per(RepSpec.sStartDate,RepSpec.sEndDate,tstr);
  rw = 1;
  Header(rw,tstr,1);
  EndHeader;

  Black_Divider(0,200);
  StartFormat(15);
  OutString(0,0,USetStr(39709),false);
  EndFormat;
  Black_Divider(0,200);

  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(39702),false);
  OutString(50,0,USetStr(39703),false);
  OutString(150,0,USetStr(39704),false);
  OutString(300,0,USetStr(39705),false);
  EndFormat;

  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,"2.0",false);
  OutString(50,0,"F",false);
  OutString(150,0,DateToString(CurrentDate,"YYYY-MM-DD") & "T" & CurrentTime,false);
  OutString(300,0,CYb.VATNr,false);
  EndFormat;
  Gray_Divider(0,1);

  StartFormat(15);
  EndFormat;

  StartFormat(15);
  OutString(0,0,USetStr(39706),false);
  OutString(150,0,USetStr(39707),false);
  OutString(300,0,USetStr(39708),false);
  EndFormat;

  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,"HansaWorld",false);
  OutString(150,0,USetStr(1802) & "/" & USetStr(904),false);
  OutString(300,0,left(USetStr(901),30),false);
  EndFormat;
  Gray_Divider(0,1);

  StartFormat(15);
  EndFormat;
  StartFormat(15);
  EndFormat;

  ExportCustomers(RepSpec);

  StartFormat(15);
  EndFormat;

  ExportSuppliers(RepSpec);

  StartFormat(15);
  EndFormat;

  ExportPurchaseInvoices(RepSpec);
  //EBS -->
  if (RepSpec.flags[1]==1) then begin
    ExportExpenses(RepSpec);
  end;
  //EBS <--

  StartFormat(15);
  EndFormat;

  ExportInvoices(RepSpec);

  StartFormat(15);
  EndFormat;

  if (RepSpec.flags[0]==1) then begin
    ExportPayments(RepSpec);
    ExportReceipts(RepSpec)
  end;

  EndJob;
  // AutomatedSalesOrderly("HasIntegratedNL");

  return;
end;
